<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\RateLimiter;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Http\RedirectResponse;
use Illuminate\Validation\ValidationException;

class AuthController extends Controller
{
    //register to find token
    public function register(Request $request)
    {
        $validatedData = $request->validate([
            'name' => 'required',
            'email' => 'required',
            'password' => 'required',
            'password_confirmation' => 'required'
        ]);

        $user = User::create([
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'password' => Hash::make($validatedData['password']),
        ]);

        $token = $user->createToken('auth_token')->plainTextToken;

        return response()->json(['token' => $token, 'user' => $user]);
    }
    public function user(Request $request)
    {
        return response()->json($request->user());
    }

    public function login(Request $request)
    {

        $key = 'login:' . $request->ip();

        $executed = RateLimiter::attempt(
            $key,
            $perMinute = 5,
            function () use ($request) {
                $credentials = $request->validate([
                    'email' => ['required', 'email'],
                    'password' => ['required'],
                ]);

                $user = User::where('email', $request->email)->first();

                if (!$user || !Hash::check($request->password, $user->password)) {
                    return false; // Login failed
                }

                // Create and return the token directly
                $token = $user->createToken('auth_token')->plainTextToken;
                return $token;
            }
        );

        if (! $executed) {
            return response()->json([
                'message' => 'Too many login attempts. Please try again later.'
            ], 429);
        }

        // Return successful response with the token
        return response()->json([
            'message' => 'Logged in successfully',
            'token' => $executed, // The token generated by the callback
        ]);
    }
    public function logout(Request $request)
    {
        $request->user()->currentAccessToken()->delete();
        return response()->json(['message' => 'Successfully logged out']);
    }
}
